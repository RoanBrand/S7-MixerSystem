FUNCTION_BLOCK CarTrack
TITLE = 'Motorized track for a car'
VERSION : '1.0'
KNOW_HOW_PROTECT
AUTHOR : 'RF Brand'
(***************************************************************************************
This controls the general navigation on the track for the cars of the system.
****************************************************************************************)
VAR_INPUT
(* Physical Inputs I *)
    iProx0 : BOOL;              // First Proxy on Track (Car Fully Reversed)
    iProx1 : BOOL;
    iProx2 : BOOL;
    iProx3 : BOOL;
    iProx4 : BOOL;              // Fifth Proxy on Track (Car Fully Forwarded)
    iProx_Slow : BOOL;          // Slow run proxy
(* Other *)
    desiredPos : INT;           // Desired Position of Car
END_VAR
VAR_OUTPUT
(* Physical Outputs Q *)
    oMotor_Fwd : BOOL;          // Move the Car Forward
    oMotor_Rev : BOOL;          // Reverse the Car
    oMotor_Fast : BOOL;         // Run Motor at max speed.
    oParked : BOOL;             // is this car parked at destination?
(* Alarms *)
    oAlarm_Position : BOOL;     // Alarm: Cannot confirm Car Position
    oAlarm_TO : BOOL;           // Alarm: Car taking too long to reach destination
END_VAR
VAR
    actualPos : INT;            // Actual current Position of Car
    lastPos : INT;              // Last known registered position
    tRunTime : SFB4;            // Timer for how long Car has been moving
    tParked : SFB4;             // arrival delay confirmation
    pos_bits AT actualPos : ARRAY[0..15] OF BOOL;
    pos_test : WORD;
    pos_test_b AT pos_test : ARRAY[0..15] OF BOOL;
    bit_cnt : INT;
END_VAR
BEGIN
// Convert Bits to Integer
pos_bits[8] := iProx0;
pos_bits[9] := iProx1;
pos_bits[10] := iProx2;
pos_bits[11] := iProx3;
pos_bits[12] := iProx4;
pos_test := INT_TO_WORD(actualPos);
// Count HIGH bits
bit_cnt := 0;
WHILE (WORD_TO_INT(pos_test) <> 0) DO
    IF (pos_test_b[8]) THEN
        bit_cnt := bit_cnt + 1;
    END_IF;
    pos_test := SHR(IN := pos_test, N := 1);
END_WHILE;
oAlarm_Position := (bit_cnt > 1);   // Alarm if more than 1 HIGH
IF (actualPos <> 0) AND NOT oAlarm_Position THEN
    lastPos := actualPos;
END_IF;
IF ((desiredPos <> actualPos) AND NOT oAlarm_Position) THEN
    IF (lastPos <> 0) THEN
        IF (desiredPos > lastPos) THEN
            oMotor_Fwd := true;
            oMotor_Rev := false;
            IF ((lastPos * 2) >= desiredPos) THEN
                oMotor_Fast := NOT iProx_Slow;
            ELSE
                oMotor_Fast := true;
            END_IF;
        ELSE
            oMotor_Fwd := false;
            oMotor_Rev := true;
            IF ((lastPos / 2) <= desiredPos) THEN
                oMotor_Fast := NOT iProx_Slow;
            ELSE
                oMotor_Fast := true;
            END_IF;
        END_IF;
    ELSE
        oMotor_Rev := true; // must check that cannot go past this limit
    END_IF;
ELSE
    oMotor_Fwd := false;
    oMotor_Rev := false;
    oMotor_Fast := false;
END_IF;
tRunTime(IN := oMotor_Fwd OR oMotor_Rev, PT := t#3m);
oAlarm_TO := tRunTime.Q;
tParked(IN := (desiredPos = actualPos), PT := t#2s);
oParked := tParked.Q;
END_FUNCTION_BLOCK
(******************************************************************************)
FUNCTION_BLOCK DeliveryCar
TITLE = 'Delivery Car'
VERSION : '1.0'
KNOW_HOW_PROTECT
AUTHOR : 'RF Brand'
(***************************************************************************************
This controls the complete Delivery Car unit and communicates with the MixerCar.
****************************************************************************************)
VAR_INPUT
    iJob : Job;                 // Job given by MixerCar
    iComm_MixerCar : INT;       // Communication from MixerCar
(* HMI *)
    cleanMode : BOOL;           // Go to dump, open and wait
    sendToDump : BOOL;          // Send current to Dump
END_VAR
VAR_OUTPUT    
    oComm_MixerCar : INT;       // Communication to MixerCar
(* Alarms *)
    oAlarmsOut : WORD;
    oAlarms AT oAlarmsOut : ARRAY[0..15] OF BOOL;
(*  oAlarms[0]  ->  "Car Track Motor Overload Tripped"
    oAlarms[1]  ->  "Car Track VSD offline/fault"
    oAlarms[2]  ->  "Unable to confirm car track pos"
    oAlarms[3]  ->  "Car taking too long to reach destination"
    oAlarms[4]  ->  "Dump valve feedback sensors interlock"
    oAlarms[5]  ->  "Dump valve not opening in time"
    oAlarms[6]  ->  "Dump valve not closing in time" 
    oAlarms[7]  ->  "Mixer Motor Overload Tripped" *) // why is this here?
END_VAR
VAR
    oldState : INT := -1;       // Last state
    State, intState : INT;      // Current State and substate
    tTimer : SFB4;              // General Timer
    myTrack : CarTrack;         // This Car's Track
    Dump_Destination : INT;     // 2->Dump     4->M1   8->M2   16->M3
END_VAR
BEGIN
myTrack(    iProx0          := iDelCar_Prox_MixCar,
            iProx1          := iDelCar_Prox_Dump,
            iProx2          := iDelCar_Prox_M1,
            iProx3          := iDelCar_Prox_M2,
            iProx4          := iDelCar_Prox_M3,
            iProx_Slow      := iDelCar_Prox_Slow
);
qDelCar_MotorFwd    := myTrack.oMotor_Fwd;
qDelCar_MotorRev    := myTrack.oMotor_Rev;
qDelCar_MotorFast   := myTrack.oMotor_Fast;
qDelCar_Siren       := qDelCar_MotorFwd XOR qDelCar_MotorRev;

oAlarms[0] := iDelCar_MotorOL;
oAlarms[1] := NOT iDelCar_VSDHealth;
oAlarms[2] := myTrack.oAlarm_Position;
oAlarms[3] := myTrack.oAlarm_TO;
oAlarms[4] := iDelCar_Piston_Open AND iDelCar_Piston_Closed;
oAlarms[7] := iMixCarMixerOL;

CASE State OF
    0 : // Go to Home Position
        IF (oldState <> State) THEN
            myTrack.desiredPos := 1;
            oldState := State;
        END_IF;

        IF (myTrack.actualPos = 1) THEN
            State := 1;
        ELSIF (cleanMode) THEN
            State := 5;
        ELSIF (sendToDump) THEN
            Dump_Destination := 2;
            State := 3;
        END_IF;

        IF (oldState <> State) THEN
            ;
        END_IF;
    1 : // Able to Start Job
        IF (oldState <> State) THEN
            intState := 0;
            oldState := State;
        END_IF;

        CASE intState OF
            0 : // Waiting for MixerCar
                IF (cleanMode) THEN
                    State := 5;
                ELSIF (sendToDump) THEN
                    Dump_Destination := 2;
                    State := 3;
                ELSIF (iComm_MixerCar = 1) THEN
                    oComm_MixerCar := 2;
                    intState := 1;
                END_IF;
            1 : // Give MixerCar go-ahead to dump
                IF (iComm_MixerCar = 3) THEN
                    Dump_Destination := iJob.Destination;
                    State := 2;
                ELSIF (iComm_MixerCar <> 1) THEN
                    oComm_MixerCar := 0;
                    intState := 0;
                END_IF;
        END_CASE;

        IF (oldState <> State) THEN
            oComm_MixerCar := 0;
        END_IF;
    2 : // Receiving Load from MixerCar
        IF (oldState <> State) THEN
            oldState := State;
        END_IF;

        IF (iComm_MixerCar = 4) THEN
            State := 3;
        ELSIF (iComm_MixerCar <> 3) THEN
            ;
        ELSIF (sendToDump) THEN
            Dump_Destination := 2;
        END_IF;

        IF (oldState <> State) THEN
            ;
        END_IF;
    3 : // Goto Dump Destination
        IF (oldState <> State) THEN
            myTrack.desiredPos := Dump_Destination;
            oldState := State;
        END_IF;

        IF (myTrack.actualPos = myTrack.desiredPos) AND (myTrack.oParked) THEN
            State := 4;
        ELSIF (sendToDump) THEN
            Dump_Destination := 2;
            myTrack.desiredPos := 2;
        END_IF;

        IF (oldState <> State) THEN
            ;
        END_IF;
    4 : // Dump Load in Shute
        IF (oldState <> State) THEN
            tTimer(IN := false);
            intState := 0;
            qDelCar_Piston_Open := true;
            oldState := State;
        END_IF;

        CASE intState OF
            0 : // Open Dump Valve
                tTimer(IN := true, PT := t#5s);
                oAlarms[5] := tTimer.Q;
                IF (iDelCar_Piston_Open) THEN
                    qDelCar_Piston_Open := false;
                    qDelCar_Vibrator := true;
                    tTimer(IN := false);
                    intState := 1;
                END_IF;
            1 : // Dumping
                tTimer(IN := true, PT := t#10s);
                IF (tTimer.Q) THEN
                    qDelCar_Piston_Close := true;
                    qDelCar_Vibrator := false;
                    tTimer(IN := false);
                    intState := 2;
                END_IF;
            2 : // Close Dump Valve
                tTimer(IN := true, PT := t#2s);
                oAlarms[6] := tTimer.Q;
                IF (iDelCar_Piston_Closed) THEN
                    qDelCar_Piston_Close := false;
                    State := 0;
                END_IF;
        END_CASE;

        IF (oldState <> State) THEN
            qDelCar_Piston_Open := false;
            qDelCar_Piston_Close := false;
            qDelCar_Vibrator := false;
            oAlarms[5] := false;
            oAlarms[6] := false;
        END_IF;
    5 : // Cleaning Mode
        IF (oldState <> State) THEN
            myTrack.desiredPos := 2;
            oldState := State;
        END_IF;

        IF NOT (cleanMode) THEN
            qDelCar_Piston_Open := false;
            qDelCar_Piston_Close := true;
            IF (iDelCar_Piston_Closed) THEN
                State := 0;
            END_IF;
        ELSIF (myTrack.actualPos = 2) AND (myTrack.oParked) THEN
            qDelCar_Piston_Open := NOT iDelCar_Piston_Open;
            tTimer(IN := qDelCar_Piston_Open, PT := t#5s);
            oAlarms[5] := tTimer.Q;
        END_IF;

        IF (oldState <> State) THEN
            qDelCar_Piston_Open := false;
            qDelCar_Piston_Close := false;
            oAlarms[5] := false;
        END_IF;
END_CASE;
END_FUNCTION_BLOCK
(******************************************************************************)
FUNCTION_BLOCK MixerCar
TITLE = 'Mixing Car'
VERSION : '1.0'
KNOW_HOW_PROTECT
AUTHOR : 'RF Brand'
(***************************************************************************************
This controls the complete Mixing Car unit and communicates with both other Cars and ResinDisp.
****************************************************************************************)
VAR_INPUT
    iJob : Job;
    iComm_SandCar : INT;
    iComm_ResinDisp : INT;
    iComm_DeliveryCar : INT;
(* HMI *) 
    sendToDump : BOOL;          // Send current to Dump
    iHandAdditionDone : BOOL;   // Confirmation of Red-ox add
END_VAR
VAR_OUTPUT
    oJob : Job;
    oComm_SandCar : INT;
    oComm_ResinDisp : INT;
    oComm_DeliveryCar : INT;
(* Alarms *)
    oAlarmsOut : WORD;
    oAlarms AT oAlarmsOut : ARRAY[0..15] OF BOOL;
(*  oAlarms[0]  ->  "Car Track Motor Overload Tripped"
    oAlarms[1]  ->  "Car Track VSD offline/fault"
    oAlarms[2]  ->  "Unable to confirm car track pos"
    oAlarms[3]  ->  "Car taking too long to reach destination"
    oAlarms[4]  ->  "Dump valve feedback sensors interlock"
    oAlarms[5]  ->  "Dump valve not opening in time"
    oAlarms[6]  ->  "Dump valve not closing in time" 
    oAlarms[7]  ->  "SandCar not dumping anymore. User to Dump on HMI"  *)
(* HMI *) 
    oHandAdditionReq : BOOL;
END_VAR
VAR
    oldState : INT := -1;
    State, intState : INT;
    tTimer : SFB4;
    myTrack : CarTrack;
    myJob : Job;
END_VAR
BEGIN
myTrack(    iProx0          := iMixCar_Prox_Sand,
            iProx1          := iMixCar_Prox_Resin,
            iProx2          := iMixCar_Prox_DelCar,
            iProx_Slow      := iMixCar_Prox_Slow
);
qMixCar_MotorFwd    := myTrack.oMotor_Fwd;
qMixCar_MotorRev    := myTrack.oMotor_Rev;
qMixCar_MotorFast   := myTrack.oMotor_Fast;
qMixCar_Siren       := qMixCar_MotorFwd XOR qMixCar_MotorRev;

oAlarms[0] := iMixCar_MotorOL;
oAlarms[1] := NOT iMixCar_VSDHealth;
oAlarms[2] := myTrack.oAlarm_Position;
oAlarms[3] := myTrack.oAlarm_TO;
oAlarms[4] := iMixCar_Piston_Open AND iMixCar_Piston_Closed;

CASE State OF
    0 : // Go to Home Position
        IF (oldState <> State) THEN
            tTimer(IN := false);
            myTrack.desiredPos := 1;
            oldState := State;
        END_IF;

        IF (myTrack.actualPos = 1) THEN
            State := 1;
        ELSIF (sendToDump) THEN
            myJob.Destination := 2;
            State := 6;
        END_IF;

        IF (oldState <> State) THEN
            qMixCar_Piston_Open := false;
            qMixCar_Piston_Close := false;
        END_IF;
    1 : // Able to Start Job
        IF (oldState <> State) THEN
            tTimer(IN := false);
            intState := 0;
            oldState := State;
        END_IF;

        CASE intState OF
            0 : // Waiting for SandCar
                tTimer(IN := NOT iMixCar_Piston_Closed, PT := t#5s);
                oAlarms[6] := tTimer.Q;
                qMixCar_Piston_Close := NOT iMixCar_Piston_Closed;
                IF (iComm_SandCar = 1) AND (iMixCar_Piston_Closed) THEN
                    oComm_SandCar := 2;
                    myJob := iJob;
                    intState := 1;
                ELSIF (sendToDump) THEN
                    myJob.Destination := 2;
                    State := 6;
                END_IF;
            1 : // Give SandCar go-ahead to dump
                IF (iComm_SandCar = 3) THEN
                    State := 2;
                ELSIF (iComm_SandCar <> 1) THEN
                    oComm_SandCar := 0;
                    intState := 0;
                END_IF;
        END_CASE;

        IF (oldState <> State) THEN
            oComm_SandCar := 0;
            oAlarms[6] := false;
            qMixCar_Piston_Close := false;
        END_IF;
    2 : // Receiving Load from SandCar
        IF (oldState <> State) THEN
            intState := 0;
            oldState := State;
        END_IF;

        IF (sendToDump) THEN
            myJob.Destination := 2;
        END_IF;
        CASE intState OF
            0 : // wait for sandcar to finish
                IF (iComm_SandCar = 4) THEN
                    intState := 1;
                ELSIF (iComm_SandCar <> 3) THEN
                    oAlarms[7] := true;
                    IF (sendToDump) THEN
                        myJob.Destination := 2;
                     State := 6;
                    END_IF;
                END_IF;
            1 : // check if oxide needed
                IF (myJob.oxide_kg > 0.0) THEN
                    oHandAdditionReq := true;
                    intState := 2;
                ELSE
                    IF (myJob.resin_kg > 0.0) THEN
                        State := 3;
                    ELSE
                        State := 6;
                    END_IF;
                END_IF;
            2 : // wait for confirmation
                IF (iHandAdditionDone) THEN
                    State := 3;
                END_IF;
        END_CASE;
        
        IF (oldState <> State) THEN
            oHandAdditionReq := false;
            oAlarms[7] := false;
        END_IF;
    3 : // Goto Resin Dispenser
        IF (oldState <> State) THEN
            tTimer(IN := false);
            qMixCarMixer := true;
            myTrack.desiredPos := 2;
            oldState := State;
        END_IF;

        tTimer(IN := true, PT := myJob.preMixTime); // pre-mix before resin
        IF (myTrack.actualPos = 2) AND (tTimer.Q) AND (myTrack.oParked) THEN
            State := 4;
        ELSIF (sendToDump) THEN
            myJob.Destination := 2;
            State := 6;
        END_IF;

        IF (oldState <> State) THEN
            qMixCarMixer := false;
        END_IF;
    4 : // Waiting for ResinDisp
        IF (oldState <> State) THEN
            intState := 0;
            oJob := myJob;
            oldState := State;
        END_IF;

        CASE intState OF
            0 : // Waiting for ResinDisp
                IF (iComm_ResinDisp = 1) THEN
                    oComm_ResinDisp := 2;
                    intState := 1;
                ELSIF (sendToDump) THEN
                    myJob.Destination := 2;
                    State := 6;
                END_IF;
            1 : // Give ResinDisp go-ahead to dump
                IF (iComm_ResinDisp = 3) THEN
                    State := 5;
                ELSIF (iComm_ResinDisp <> 1) THEN
                    oComm_ResinDisp := 0;
                    intState := 0;
                END_IF;
        END_CASE;
        IF (oldState <> State) THEN
            oComm_ResinDisp := 0;
        END_IF;
    5 : // receiving load from ResinDisp
        IF (oldState <> State) THEN
            intState := 0;
            tTimer(IN := false);
            qMixCarMixer := true;
            oldState := State;
        END_IF;
        IF (sendToDump) THEN
            myJob.Destination := 2;
        END_IF;
        CASE intState OF
            0 : // Wait for next message from ResinDisp
                IF (iComm_ResinDisp = 4) THEN
                    intState := 1;
                ELSIF (iComm_ResinDisp <> 3) THEN
                    ; //timeout needed?
                END_IF;
            1 : // Delay for dripping Resin
                tTimer(IN := true, PT := t#4s);
                IF (tTimer.Q) THEN
                    State := 6;
                END_IF;
        END_CASE;
        IF (oldState <> State) THEN
            qMixCarMixer := false;
        END_IF;
    6 : // Goto DeliveryCar
        IF (oldState <> State) THEN
            tTimer(IN := false);
            qMixCarMixer := true;
            IF (myJob.MixTime = t#0s) THEN
                myJob.MixTime := t#1ms; // hacky
            END_IF;
            myTrack.desiredPos := 4;
            oldState := State;
        END_IF;
        IF (sendToDump) THEN
            myJob.Destination := 2;
        END_IF;
        tTimer(IN := true, PT := myJob.MixTime); // mix time before delivery
        IF (myTrack.actualPos = 4) AND (tTimer.Q) AND (myTrack.oParked) THEN
            State := 7;
        END_IF;
        IF (oldState <> State) THEN
            qMixCarMixer := false;
        END_IF;
    7 : // Dump Load in DeliveryCar
        IF (oldState <> State) THEN
            tTimer(IN := false);
            intState := 0;
            oJob := myJob;
            oComm_DeliveryCar := 1;
            oldState := State;
        END_IF;
        CASE intState OF
            0 : // Wait for DeliveryCar
                IF (iComm_DeliveryCar = 2) THEN
                    oComm_DeliveryCar := 3;
                    qMixCar_Piston_Open := true;
                    intState := 1;
                END_IF;
            1 : // Open Dump Valve
                tTimer(IN := true, PT := t#5s);
                oAlarms[5] := tTimer.Q;
                IF (iMixCar_Piston_Open) THEN
                    qMixCar_Piston_Open := false;
                    tTimer(IN := false);
                    qMixCarMixer := true;
                    intState := 2;
                END_IF;
            2 : // Dumping
                tTimer(IN := true, PT := t#25s);
                IF (tTimer.Q) THEN
                    qMixCar_Piston_Close := true;
                    qMixCarMixer := false;
                    oComm_DeliveryCar := 4;
                    tTimer(IN := false);
                    intState := 3;
                END_IF;
            3 : // Close Dump Valve
                tTimer(IN := true, PT := t#5s);
                oAlarms[6] := tTimer.Q;
                IF (iMixCar_Piston_Closed) THEN
                    qMixCar_Piston_Close := false;
                    State := 0;
                END_IF;
        END_CASE;
        IF (oldState <> State) THEN
            oComm_DeliveryCar := 0;
            qMixCar_Piston_Open := false;
            qMixCar_Piston_Close := false;
            qMixCarMixer := false;
            oAlarms[5] := false;
            oAlarms[6] := false;
        END_IF;
END_CASE;
END_FUNCTION_BLOCK
(******************************************************************************)
FUNCTION_BLOCK SandCar
TITLE = 'Sand collector Car'
VERSION : '1.0'
KNOW_HOW_PROTECT
AUTHOR : 'RF Brand'
(***************************************************************************************
This controls the complete Sand Car unit and communicates with the MixerCar.
****************************************************************************************)
VAR_INPUT
    WeightVal : INT;
    iJob : Job;
    iComm_MixerCar : INT;
    iZeroScale : BOOL;
    iManualModeReq : BOOL;
END_VAR
VAR_IN_OUT
    iStartJob : BOOL;
END_VAR
VAR_OUTPUT
    oComm_MixerCar : INT;
    oJob : Job;
(* Alarms *)
    oAlarmsOut : WORD;
    oAlarms AT oAlarmsOut : ARRAY[0..15] OF BOOL;
(*  oAlarms[0]  ->  "Car Track Motor Overload Tripped"
    oAlarms[1]  ->  "Car Track VSD offline/fault"
    oAlarms[2]  ->  "Unable to confirm car track pos"
    oAlarms[3]  ->  "Car taking too long to reach destination"
    oAlarms[4]  ->  "Dump valve feedback sensors interlock"
    oAlarms[5]  ->  "Dump valve not opening in time"
    oAlarms[6]  ->  "Dump valve not closing in time" 
    oAlarms[7]  ->  "Silica valve not opening in time"
    oAlarms[8]  ->  "Silica valve not closing in time"
    oAlarms[9]  ->  "Silica valve feedback sensors interlock"
    oAlarms[10] ->  "Chrome valve not opening in time"
    oAlarms[11] ->  "Chrome valve not closing in time"
    oAlarms[12] ->  "Chrome valve feedback sensors interlock" *)
END_VAR
VAR
    WeightValKg : REAL;
    oldState : INT := -1;
    State, intState : INT;
    tTimer : SFB4;
    myTrack : CarTrack;
    myJob : Job;
    zeroVal : INT := 5272;
    desiredWeightVal : INT;
    WeightCal : REAL := 22.6426;
    fPulseOpen : BOOL;
    
(* Settings *)
    startPulseWeight : REAL := 50.0;    // start closing valve if this many kg's left
    pulseOpenTime1 : TIME   := t#1.7s;  // Stage 1 pulse fillup time
    pulseOpenTime2 : TIME   := t#1.4s;  // Stage 2 pulse fillup time
    endOffset : INT         := 24;      // uncalibrated sand-in-air ammount after final close
END_VAR
BEGIN
myTrack(    iProx0          := iSandCar_Prox_MixCar,
            iProx1          := iSandCar_Prox_Silica,
            iProx2          := iSandCar_Prox_Chrome,
            iProx_Slow      := iSandCar_Prox_Slow
);
IF (State <> 10) THEN
    qSandCar_MotorFwd   := myTrack.oMotor_Fwd;
    qSandCar_MotorRev   := myTrack.oMotor_Rev;
    qSandCar_MotorFast  := myTrack.oMotor_Fast;
END_IF;
qSandCar_Siren      := qSandCar_MotorFwd XOR qSandCar_MotorRev;

oAlarms[0] := iSandCar_MotorOL;
oAlarms[1] := NOT iSandCar_VSDHealth;
oAlarms[2] := myTrack.oAlarm_Position;
oAlarms[3] := myTrack.oAlarm_TO;
oAlarms[4] := iSandCar_Piston_Open AND iSandCar_Piston_Closed;
oAlarms[9] := iSilica_Open AND iSilica_Closed;
oAlarms[12] := iChrome_Open AND iChrome_Closed;

WeightValKg := (WeightVal - zeroVal) / WeightCal;
IF (iZeroScale) THEN
    zeroVal := WeightVal;
END_IF;

IF (iManualModeReq) AND (State <> 10) THEN
    State := 10;
END_IF;
CASE State OF
    0 : // Go to Home Position (Silica)
        IF (oldState <> State) THEN
            myTrack.desiredPos := 2;
            oldState := State;
        END_IF;
        IF (myTrack.actualPos = 2) AND (myTrack.oParked) THEN
            State := 1;
        END_IF;
        IF (oldState <> State) THEN
            ;
        END_IF;
    1 : // Able to Start Job
        IF (oldState <> State) THEN
            tTimer(IN := false);
            oldState := State;
        END_IF;
        tTimer(IN := true, PT := t#4s);
        IF (iStartJob AND tTimer.Q) THEN
            iStartJob := false;
            IF (iJob.silica_kg > 0.0) THEN
                myJob := iJob;
                State := 2;
            ELSIF (iJob.chromite_kg > 0.0) THEN
                myTrack.desiredPos := 4;
                myJob := iJob;
                State := 3;
            END_IF;
        END_IF;
        IF (oldState <> State) THEN
            ;
        END_IF;
    2 : // Receiving Sand from Silica
        IF (oldState <> State) THEN
            tTimer(IN := false);
            IF (myJob.silica_kg > startPulseWeight) THEN
                intState := 0;
            ELSE
                fPulseOpen := true;
                intState := 1;
            END_IF;
            desiredWeightVal := WeightVal + REAL_TO_INT(WeightCal * myJob.silica_kg); // upper limit?
            oldState := State;
        END_IF;
        CASE intState OF
            0 : // Stage 1 - Wait for fillup setpoint
                //tTimer(IN := NOT iSilica_Open, PT := t#4s);
                qSilica_Open := true;
                //oAlarms[7] := tTimer.Q;
                IF (((desiredWeightVal - WeightVal) / WeightCal) < startPulseWeight) THEN
                    tTimer(IN := false);
                    fPulseOpen := false;
                    intState := 1;
                END_IF;
            1 : // Stage 2 - Pulse until 2Kg left
                IF (fPulseOpen) THEN
                    tTimer(IN := true, PT := pulseOpenTime1);
                    qSilica_Open := true;
                    IF (tTimer.Q) THEN
                        tTimer(IN := false);
                        fPulseOpen := false;
                    END_IF;
                ELSE
                    tTimer(IN := true, PT := t#3s);
                    qSilica_Open := false;
                    IF (tTimer.Q) THEN
                        tTimer(IN := false);
                        fPulseOpen := true;
                    END_IF;
                END_IF;
                IF (WeightVal >= (desiredWeightVal - endOffset)) THEN  // little bit under
                    tTimer(IN := false);
                    intState := 3;
                ELSIF (((desiredWeightVal - WeightVal) / WeightCal) < 4.0) THEN
                    tTimer(IN := false);
                    fPulseOpen := false;
                    intState := 2;
                END_IF;
            2 : // Stage 3 - Pulse until target (no more left)
                IF (fPulseOpen) THEN
                    tTimer(IN := true, PT := pulseOpenTime2);
                    qSilica_Open := true;
                    IF (tTimer.Q) THEN
                        tTimer(IN := false);
                        fPulseOpen := false;
                    END_IF;
                ELSE
                    tTimer(IN := true, PT := t#3s);
                    qSilica_Open := false;
                    IF (tTimer.Q) THEN
                        tTimer(IN := false);
                        fPulseOpen := true;
                    END_IF;
                END_IF;
                IF (WeightVal >= (desiredWeightVal - endOffset)) THEN  // little bit under
                    tTimer(IN := false);
                    intState := 3;
                END_IF;    
            3 : // wait for close
                qSilica_Open := false;
                tTimer(IN := true, PT := t#1.5s);
                //oAlarms[8] := NOT iSilica_Closed AND (tTimer.ET >= t#3s);
                IF (tTimer.Q) THEN
                    IF (myJob.chromite_kg > 0.0) THEN
                        myTrack.desiredPos := 4;
                        State := 3;
                    ELSE
                        State := 5;
                    END_IF;
                END_IF;
        END_CASE;
        IF (oldState <> State) THEN
            qSilica_Open := false;
            oAlarms[7] := false;
            oAlarms[8] := false;
        END_IF;
    3 : // Goto next sand dumper (chrome) // pos set from caller
        IF (oldState <> State) THEN
            tTimer(IN := false);
            oldState := State;
        END_IF;
        IF (myTrack.actualPos = myTrack.desiredPos) AND (myTrack.oParked) THEN
            State := 4;
        END_IF;
        IF (oldState <> State) THEN
            ;
        END_IF;
    4 : // Receiving Sand from Chrome
        IF (oldState <> State) THEN
            tTimer(IN := false);
            IF (myJob.chromite_kg > startPulseWeight) THEN
                intState := 0;
            ELSE
                fPulseOpen := true;
                intState := 1;
            END_IF;
            desiredWeightVal := WeightVal + REAL_TO_INT(WeightCal * myJob.chromite_kg);
            oldState := State;
        END_IF;
        CASE intState OF
            0 : // Stage 1 - Wait for fillup setpoint
                //tTimer(IN := NOT iSilica_Open, PT := t#4s);
                qChrome_Open := true;
                //oAlarms[7] := tTimer.Q;
                IF (((desiredWeightVal - WeightVal) / WeightCal) < startPulseWeight) THEN
                    tTimer(IN := false);
                    fPulseOpen := false;
                    intState := 1;
                END_IF;
            1 : // Stage 2 - Pulse until 2Kg left
                IF (fPulseOpen) THEN
                    tTimer(IN := true, PT := pulseOpenTime1);
                    qChrome_Open := true;
                    IF (tTimer.Q) THEN
                        tTimer(IN := false);
                        fPulseOpen := false;
                    END_IF;
                ELSE
                    tTimer(IN := true, PT := t#3s);
                    qChrome_Open := false;
                    IF (tTimer.Q) THEN
                        tTimer(IN := false);
                        fPulseOpen := true;
                    END_IF;
                END_IF;
                IF (WeightVal >= (desiredWeightVal - endOffset)) THEN  // little bit under
                    tTimer(IN := false);
                    intState := 3;
                ELSIF (((desiredWeightVal - WeightVal) / WeightCal) < 4.0) THEN
                    tTimer(IN := false);
                    fPulseOpen := false;
                    intState := 2;
                END_IF;
            2 : // Stage 3 - Pulse until target (no more left)
                IF (fPulseOpen) THEN
                    tTimer(IN := true, PT := pulseOpenTime2);
                    qChrome_Open := true;
                    IF (tTimer.Q) THEN
                        tTimer(IN := false);
                        fPulseOpen := false;
                    END_IF;
                ELSE
                    tTimer(IN := true, PT := t#3s);
                    qChrome_Open := false;
                    IF (tTimer.Q) THEN
                        tTimer(IN := false);
                        fPulseOpen := true;
                    END_IF;
                END_IF;
                IF (WeightVal >= (desiredWeightVal - endOffset)) THEN  // little bit under
                    tTimer(IN := false);
                    intState := 3;
                END_IF;
            3 : // wait for close
                qChrome_Open := false;
                tTimer(IN := true, PT := t#1.5s);
                //oAlarms[8] := NOT iSilica_Closed AND (tTimer.ET >= t#3s);
                IF (tTimer.Q) THEN
                    State := 5;
                END_IF;
        END_CASE;  
        IF (oldState <> State) THEN
            qChrome_Open := false;
        END_IF;
    5 : // Goto MixerCar
        IF (oldState <> State) THEN
            myTrack.desiredPos := 1;
            oldState := State;
        END_IF;
        IF (myTrack.actualPos = 1) AND (myTrack.oParked) THEN
            State := 6;
        END_IF;
        IF (oldState <> State) THEN
            ;
        END_IF;
    6 : // Dump into MixerCar
        IF (oldState <> State) THEN
            tTimer(IN := false);
            intState := 0;
            oJob := myJob;
            oComm_MixerCar := 1;
            oldState := State;
        END_IF;
        CASE intState OF
            0 : // Wait for MixerCar
                IF (iComm_MixerCar = 2) THEN
                    oComm_MixerCar := 3;
                    qSandCar_Piston_Open := true;
                    intState := 1;
                END_IF;
            1 : // Open Dump Valve
                tTimer(IN := true, PT := t#2s);
                //oAlarms[5] := (tTimer.ET >= t#5s);
                IF (tTimer.Q) THEN
                    tTimer(IN := false);
                    intState := 2;
                END_IF;
            2 : // Dumping
                tTimer(IN := true, PT := t#25s);
                IF ((WeightVal < zeroVal+4) OR tTimer.Q) THEN // if car empty
                    qSandCar_Piston_Open := false;
                    oComm_MixerCar := 4;
                    tTimer(IN := false);
                    intState := 3;
                END_IF;
            3 : // Close Dump Valve
                tTimer(IN := true, PT := t#3s);
               // oAlarms[6] := (tTimer.ET >= t#5s);
                IF (tTimer.Q) THEN
                    State := 0;
                END_IF;
        END_CASE;
        IF (oldState <> State) THEN
            oComm_MixerCar := 0;
            qSandCar_Piston_Open := false;
            oAlarms[5] := false;
            oAlarms[6] := false;
        END_IF;
   10 : // Manual Mode
        IF (oldState <> State) THEN
            tTimer(IN := false);
            intState := 0;
            qSandCar_MotorFwd   := false;
            qSandCar_MotorRev   := false;
            qSandCar_Piston_Open := false;
            qSilica_Open := false;
            qChrome_Open := false;
            oComm_MixerCar := 0;
            oldState := State;
        END_IF;
        IF NOT (iManualModeReq) THEN
            State := 0;
        END_IF;
        IF (oldState <> State) THEN
            qSandCar_MotorFwd   := false;
            qSandCar_MotorRev   := false;
            qSandCar_Piston_Open := false;
            qSilica_Open := false;
            qChrome_Open := false;
        END_IF;
END_CASE;   
END_FUNCTION_BLOCK
